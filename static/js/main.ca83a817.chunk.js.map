{"version":3,"sources":["interface/Vector.js","interface/Grid.js","interface/actionTypes.js","interface/RandomMove.js","interface/View.js","interface/World.js","interface/entities/Wall.js","interface/entities/Herbivore.js","interface/entities/Predator.js","interface/entities/Grass.js","components/ViewWorld/ViewWorld.js","startPlanesWorld.js","components/WorldSettings/WorldSettings.js","App.js","index.js"],"names":["Vector","x","y","Object","classCallCheck","this","other","Grid","width","height","space","Array","vector","value","f","context","call","actionTypes","create","grow","critter","energy","move","action","dest","checkDestination","grid","get","set","eat","atDest","reproduce","baby","elementFromChar","legend","originChar","randomElement","array","Math","floor","random","length","directions","n","ne","e","se","s","sw","w","nw","View","world","dir","target","plus","isInside","charFromElement","ch","found","look","push","findAll","element","World","plan","forEach","line","dataMap","output","countOfEntities","key","tmpString","_this","acted","act","indexOf","letAct","type","hasOwnProperty","direction","Wall","Herbivore","find","grass","Predator","animal","Grass","ViewWorld","state","worldObj","titleStartBtn","infoWorld","createWorld","props","sizeWorld","#","o","*","@","setState","getMapInfo","restartWorld","clearInterval","timerId","startStopBtn","setInterval","turn","turnDelay","nextStep","_this$state","toggleShowViewWorld","react_default","a","createElement","className","id","onClick","concat","map","string","i","Component","largePlan","mediumPlan","smallPlan","WorldSettings","htmlFor","min","name","defaultValue","defaultTurnDelay","placeholder","onChange","setValue","changeSizeWorld","defaultChecked","defaultSizeWorld","App","showViewWorld","defineProperty","console","log","components_ViewWorld_ViewWorld","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.ca83a817.chunk.js","sourcesContent":["class Vector {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  plus(other) {\n    return new Vector(this.x + other.x, this.y + other.y);\n  }\n}\n\nexport default Vector;\n","import Vector from \"./Vector\";\n\nclass Grid {\n  constructor(width, height) {\n    this.space = new Array(width * height); // одномерный массив (пространство)\n    this.width = width;\n    this.height = height;\n  }\n\n  // проверка на то входит ли в границы массива запрашиваемое значение\n  isInside(vector) {\n    return vector.x >= 0 && vector.x < this.width && vector.y >= 0 && vector.y < this.height;\n  }\n\n  get(vector) {\n    return this.space[vector.x + this.width * vector.y];\n  }\n\n  set(vector, value) {\n    this.space[vector.x + this.width * vector.y] = value;\n  }\n\n  // вызов функции для каждого элемента сетки\n\n  forEach(f, context) {\n    for (var y = 0; y < this.height; y++) {\n      for (var x = 0; x < this.width; x++) {\n        var value = this.space[x + y * this.width];\n        if (value != null) f.call(context, value, new Vector(x, y));\n      }\n    }\n  }\n}\n\nexport default Grid;\n","import { elementFromChar } from \"./World\";\n\nexport const actionTypes = Object.create(null);\n\n// Рост всегда успешен и добавляет половину единицы к энергетическому\n// уровню растения.\n\nactionTypes.grow = function(critter) {\n  critter.energy += 0.5;\n  return true;\n};\n\n/*\n    1. Предоставляет ли действие допустимое направление (checkDestination)\n    2. Если не предоставляет, или в том направлении не пустой участок или у \n        существа не хватает энергии - move возвращает false, т.о. показывая что действие не состоялось. \n    3. Если все ок, двигаем существо.\n*/\n\nactionTypes.move = function(critter, vector, action) {\n  let dest = this.checkDestination(action, vector);\n  if (dest == null || critter.energy <= 1 || this.grid.get(dest) != null) return false;\n  critter.energy -= 1;\n  this.grid.set(vector, null);\n  this.grid.set(dest, critter);\n  return true;\n};\n\n// при поедании существом другого существа либо травы, соседняя клетка должна содержать энергию\n// если действие подтверждается (true), тогда энергия съеденного переходит к едоку, а жертва удаляется из сетки.\n\nactionTypes.eat = function(critter, vector, action) {\n  let dest = this.checkDestination(action, vector);\n  let atDest = dest != null && this.grid.get(dest);\n  if (!atDest || atDest.energy == null) return false;\n  critter.energy += atDest.energy;\n  this.grid.set(dest, null);\n  return true;\n};\n\n// размножение отнимает в 2 раза больше энергии чем есть у новорожденного.\n// переменная baby - гипотетический отпрыск, с помощью которого проверяем хватает ли у его родителя энергии для его рождения\n// энергия гипотетического ребенка = нач. значению энергии при создании существа\n// энергия родителя должна быть в 2 раза больше его начальной (стартовой) энергии.\n// если её хватает, то ребенок перемещается на соседнюю клетку.\n//\nactionTypes.reproduce = function(critter, vector, action) {\n  let baby = elementFromChar(this.legend, critter.originChar);\n  let dest = this.checkDestination(action, vector);\n  if (dest == null || critter.energy <= 2 * baby.energy || this.grid.get(dest) != null) return false;\n  critter.energy /= 2;\n  baby.energy = critter.energy;\n  this.grid.set(dest, baby);\n  return true;\n};\n","import Vector from \"./Vector\";\n\nclass RandomMove {\n  constructor() {\n    this.direction = randomElement(Object.keys(directions));\n  }\n}\n\nexport function randomElement(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nexport const directions = {\n  // возможные направления движения/поля зрения существа\n  n: new Vector(0, -1),\n  ne: new Vector(1, -1),\n  e: new Vector(1, 0),\n  se: new Vector(1, 1),\n  s: new Vector(0, 1),\n  sw: new Vector(-1, 1),\n  w: new Vector(-1, 0),\n  nw: new Vector(-1, -1),\n};\n\nexport default RandomMove;\n","import { directions, randomElement } from \"./RandomMove\";\nimport { charFromElement } from \"./World\";\n\nclass View {\n  constructor(world, vector) {\n    this.world = world;\n    this.vector = vector;\n  }\n\n  // look - вычисляем координаты на которые мы пытаемся посмотреть,\n  // и получаем соответсвующий символ элемента находящийся там.\n  // Если смотрим снаружу сетки, то возвращаем стену,\n  // т.к. без окружающих стен существа не смогут сойти с края.\n\n  look(dir) {\n    let target = this.vector.plus(directions[dir]);\n    return this.world.grid.isInside(target) ? charFromElement(this.world.grid.get(target)) : \"#\";\n  }\n\n  findAll(ch) {\n    let found = [];\n    for (let dir in directions) if (this.look(dir) === ch) found.push(dir);\n    return found;\n  }\n\n  find(ch) {\n    var found = this.findAll(ch);\n    if (found.length === 0) return null;\n    return randomElement(found);\n  }\n}\n\nexport default View;\n","import Grid from \"./Grid\";\nimport Vector from \"./Vector\";\nimport { actionTypes } from \"./actionTypes\";\nimport { directions } from \"./RandomMove\";\nimport View from \"./View\";\n\nclass World {\n  constructor(plan, legend) {\n    let grid = new Grid(plan[0].length, plan.length);\n    this.grid = grid;\n    this.legend = legend;\n    plan.forEach((line, y) => {\n      for (let x = 0; x < line.length; x++) grid.set(new Vector(x, y), elementFromChar(legend, line[x]));\n    });\n  }\n\n  getMapInfo() {\n    let dataMap = {\n      output: [],\n      countOfEntities: {},\n    };\n    for (let key in this.legend) {\n      dataMap.countOfEntities[key] = 0;\n    }\n    for (let y = 0; y < this.grid.height; y++) {\n      let tmpString = \"\";\n      for (let x = 0; x < this.grid.width; x++) {\n        let element = this.grid.get(new Vector(x, y));\n        tmpString += charFromElement(element);\n        if (element && element.originChar) {\n          dataMap.countOfEntities[element.originChar]++;\n        }\n      }\n      dataMap.output[y] = tmpString;\n    }\n    return dataMap;\n  }\n\n  /* \n    turn - метод шага, даёт существам возможность действовать\n    обходит методом forEach (определенным выше) сетку и ищет объекты у которых есть метод act, \n    который он и вызывает c параметром объектом action, \n    который производит действие если оно допустимо (для тех у кого оно есть).\n    Чтобы предостварить случай того что существа могут перейти на клетку которая еще \n    не обыла обработана во время вызова функции forEach необходимо хранить массив объектов (acted) существ которые уже сделали свой шаг, \n    и игнорировать их при повторном проходе, тем самым запретить одному \n    существу осущетвлять 2 действия за один вызов метода turn()\n*/\n\n  turn() {\n    let acted = [];\n    this.grid.forEach((critter, vector) => {\n      if (critter.act && acted.indexOf(critter) === -1) {\n        acted.push(critter);\n        this.letAct(critter, vector);\n      }\n    }, this); // для правильного доступа к this в функции (в контексте World)\n  }\n\n  // letAct - вызывает функции по совершению действий передавая в них параметры,\n\n  letAct(critter, vector) {\n    let action = critter.act(new View(this, vector));\n    let handled = action && action.type in actionTypes && actionTypes[action.type].call(this, critter, vector, action);\n    if (!handled) {\n      critter.energy -= 0.2;\n      if (critter.energy <= 0) this.grid.set(vector, null);\n    }\n  }\n\n  checkDestination(action, vector) {\n    if (directions.hasOwnProperty(action.direction)) {\n      var dest = vector.plus(directions[action.direction]);\n      if (this.grid.isInside(dest)) return dest;\n    }\n  }\n}\n\nexport function elementFromChar(legend, ch) {\n  if (ch === \" \") return null;\n  let element = new legend[ch](); // создаётся экземпляр нужного типа, находя конструетор символа и применяя к нему new\n  element.originChar = ch;\n  return element;\n}\n\nexport function charFromElement(element) {\n  return element === null ? \" \" : element.originChar;\n}\n\nexport default World;\n","class Wall {}\n\nexport default Wall;\n","class Herbivore {\n  constructor() {\n    this.energy = 20;\n  }\n\n  act(context) {\n    let space = context.find(\" \");\n    if (this.energy > 60 && space) return { type: \"reproduce\", direction: space };\n    let grass = context.find(\"*\");\n    if (grass) return { type: \"eat\", direction: grass };\n    if (space) return { type: \"move\", direction: space };\n  }\n}\n\nexport default Herbivore;\n","class Predator {\n  constructor() {\n    this.energy = 20;\n  }\n\n  act(context) {\n    let space = context.find(\" \");\n    if (this.energy > 60 && space) return { type: \"reproduce\", direction: space };\n    let animal = context.find(\"o\");\n    if (animal) return { type: \"eat\", direction: animal };\n    if (space) return { type: \"move\", direction: space };\n  }\n}\n\nexport default Predator;\n","/* \n  Трава начинает со случайного уровня энергии от 2 до 7, чтобы она не\n  размножалась в один ход. Когда растение достигает энергии 15, а рядом\n  есть пустая клетка – она размножается в неё. Если она не может\n  размножится, то просто растёт, пока не достигнет энергии 20.\n*/\n\nclass Grass {\n  constructor() {\n    this.energy = 2 + Math.floor(Math.random() * 5);\n  }\n\n  act(context) {\n    if (this.energy > 15) {\n      let space = context.find(\" \");\n      if (space) return { type: \"reproduce\", direction: space };\n    }\n    if (this.energy < 20) return { type: \"grow\" };\n  }\n}\n\nexport default Grass;\n","import React, { Component } from \"react\";\nimport World from \"../../interface/World\";\nimport Wall from \"../../interface/entities/Wall\";\nimport Herbivore from \"../../interface/entities/Herbivore\";\nimport Predator from \"../../interface/entities/Predator\";\nimport Grass from \"../../interface/entities/Grass\";\nclass ViewWorld extends Component {\n  state = {\n    world: [],\n    worldObj: {},\n    titleStartBtn: \"Start\",\n    infoWorld: {},\n  };\n\n  componentDidMount() {\n    this.createWorld();\n  }\n\n  createWorld = () => {\n    let world = new World(this.props.sizeWorld, { \"#\": Wall, o: Herbivore, \"*\": Grass, \"@\": Predator });\n    this.setState({ worldObj: world, world: world.getMapInfo().output, infoWorld: world.getMapInfo().countOfEntities });\n  };\n\n  restartWorld = () => {\n    clearInterval(this.state.timerId);\n    this.createWorld();\n    this.setState({ titleStartBtn: \"Start\" });\n  };\n\n  startStopBtn = () => {\n    if (this.state.titleStartBtn === \"Pause\") {\n      clearInterval(this.state.timerId);\n      this.setState({ titleStartBtn: \"Continue\" });\n    } else {\n      let timerId = setInterval(() => {\n        this.state.worldObj.turn();\n        this.setState({\n          world: this.state.worldObj.getMapInfo().output,\n          infoWorld: this.state.worldObj.getMapInfo().countOfEntities,\n        });\n      }, this.props.turnDelay);\n      this.setState({ timerId: timerId, titleStartBtn: \"Pause\" });\n    }\n  };\n\n  nextStep = () => {\n    this.state.worldObj.turn();\n    this.setState({\n      world: this.state.worldObj.getMapInfo().output,\n      infoWorld: this.state.worldObj.getMapInfo().countOfEntities,\n    });\n  };\n\n  render() {\n    const { world, titleStartBtn, infoWorld } = this.state;\n    const { toggleShowViewWorld } = this.props;\n    return (\n      <div className=\"viewWorld\">\n        <div className=\"wrapperButtons\">\n          <button id=\"btnStart-Pause\" type=\"button\" className=\"btn btn-success\" onClick={this.startStopBtn}>\n            {titleStartBtn}\n          </button>\n          <button id=\"btnNextStep\" type=\"button\" className=\"btn btn-primary\" onClick={this.nextStep}>\n            Next Step\n          </button>\n          <button id=\"btnRestart\" type=\"button\" className=\"btn btn-danger\" onClick={this.restartWorld}>\n            Restart\n          </button>\n        </div>\n        <div className=\"wrapperInfoWorld\">\n          <div className=\"columnInfoWorld\">\n            <div className=\"infoCount\">{`Grass (*): ${infoWorld[\"*\"]}`}</div>\n            <div className=\"infoCount\">{`Herbivores (o): ${infoWorld[\"o\"]}`}</div>\n          </div>\n          <div className=\"columnInfoWorld\">\n            <div className=\"infoCount\">{`Predators (@): ${infoWorld[\"@\"]}`}</div>\n            <div className=\"infoCount\">{`Walls (#): ${infoWorld[\"#\"]}`}</div>\n          </div>\n        </div>\n        <div id=\"world\">\n          {world.map((string, i) => {\n            return (\n              <div className=\"string\" key={i}>\n                {string}\n              </div>\n            );\n          })}\n        </div>\n        <div className=\"wrapBackToSettings\">\n          <button onClick={toggleShowViewWorld} id=\"btnBack\" type=\"button\" className=\"btn btn-secondary\">\n            Back to World Settings\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ViewWorld;\n","export const largePlan = [\n  \"#####################################################################\",\n  \"#             #      @                   @                          #\",\n  \"#     ***     #  @      @             @        @       ####         #\",\n  \"#     ****    ######                               *   #  #    #    #\",\n  \"#     *        @              *       @    *         ###  ####      #\",\n  \"#     o    o          @                   #       @    #     #      #\",\n  \"#   o            *        *      #      ###            #  *  #   #  #\",\n  \"#  o       o         *          #####     # #   *            #  ##  #\",\n  \"#      o       @     ***    **   #   #    ######         o   #  o   #\",\n  \"#          o       @            #          o   #    @          # ## #\",\n  \"#     o       @         #########            * #       *            #\",\n  \"#        #             #                       # o           @      #\",\n  \"#        #       @      #         o     *      #         *          #\",\n  \"#     ## ###                o   o      *       *  o      o     *    #\",\n  \"#            @                                     *                #\",\n  \"#      o             * ###           #####       *         @      o #\",\n  \"#            o       ###  *    **       *     o  #   ##   ***       #\",\n  \"#     **         o   #       ****     **  o  #####      o   **      #\",\n  \"#   o     ***        #         *       *                            #\",\n  \"#        o ***        #         *     o *                    @      #\",\n  \"#  o     ***        #         *       *     ####         o          #\",\n  \"#       #######        #       o *      o*  #  ###           @   o  #\",\n  \"#          ***#    #         *       *      #    #    o  **         #\",\n  \"#    o       *  #         *  o    *         #    ###       ***  @   #\",\n  \"#  o     *          #         *    o  *         o        @          #\",\n  \"#       **     #         *       *                          o       #\",\n  \"#####################################################################\",\n];\n\nexport const mediumPlan = [\n  \"####################################################\",\n  \"#                 ####         ****              ###\",\n  \"#   *  @  ##                 ########       oo    ##\",\n  \"#   *    ##        o o                 ****       *#\",\n  \"#       ##*                        ##########     *#\",\n  \"#      ##***  *         ****                     **#\",\n  \"#* **  #  *  ***      #########                  **#\",\n  \"#* **  #      *              *#   *              **#\",\n  \"#     ##              #   o   #  ***          ######\",\n  \"#*            @       #       #   *        o  #    #\",\n  \"#*                    #  ######                 ** #\",\n  \"###          ****          ***                  ** #\",\n  \"#       o                        @         o       #\",\n  \"#   *     ##  ##  ##  ##               ###      *  #\",\n  \"#   **         #              *       #####  o     #\",\n  \"##  **  o   o  #  #    ***  ***        ###      ** #\",\n  \"###               #   *****                    ****#\",\n  \"####################################################\",\n];\n\nexport const smallPlan = [\n  \"##################################\",\n  \"#  *** o      *      @      *  o #\",\n  \"# o **       *** @      @  ***   #\",\n  \"#             * *         #####  #\",\n  \"#         o    **        #    *  #\",\n  \"# *****        @   o   #### **   #\",\n  \"#   @*** ###   ***        # ***  #\",\n  \"#        #   ****  o         #o  #\",\n  \"#            *****  **   #       #\",\n  \"#  o  *   o ###     o**#         #\",\n  \"#     ***     #         #        #\",\n  \"#    *   o    #   @   ###   @    #\",\n  \"#                     o          #\",\n  \"##################################\",\n];\n","import React from \"react\";\nimport { largePlan, mediumPlan, smallPlan } from \"../../startPlanesWorld\";\n\nexport default function WorldSettings(props) {\n  return (\n    <div className=\"customizeWorld\">\n      <h2>World settings</h2>\n      <div className=\"form-group\">\n        <label htmlFor=\"turnDelay\">Turn Delay (in milliseconds):</label>\n        <input\n          type=\"number\"\n          min=\"50\"\n          id=\"turnDelay\"\n          className=\"form-control\"\n          name=\"turnDelay\"\n          defaultValue={props.defaultTurnDelay}\n          placeholder=\"Enter a world change delay\"\n          onChange={props.setValue}\n        />\n      </div>\n      <div className=\"wrapperMapSizeSetting\">\n        <div>Choose the size of the world: </div>\n        <div className=\"form-check form-check-inline\">\n          <input\n            className=\"form-check-input\"\n            type=\"radio\"\n            name=\"sizeWorld\"\n            id=\"largeWorld\"\n            value=\"largePlan\"\n            onChange={props.changeSizeWorld}\n            defaultChecked={props.defaultSizeWorld === largePlan ? \"checked\" : \"\"}\n          />\n          <label className=\"form-check-label\" htmlFor=\"inlineRadio1\">\n            Large\n          </label>\n        </div>\n        <div className=\"form-check form-check-inline\">\n          <input\n            className=\"form-check-input\"\n            type=\"radio\"\n            name=\"sizeWorld\"\n            id=\"mediumWorld\"\n            value=\"mediumPlan\"\n            onChange={props.changeSizeWorld}\n            defaultChecked={props.defaultSizeWorld === mediumPlan ? \"checked\" : \"\"}\n          />\n          <label className=\"form-check-label\" htmlFor=\"inlineRadio2\">\n            Medium\n          </label>\n        </div>\n        <div className=\"form-check form-check-inline\">\n          <input\n            className=\"form-check-input\"\n            type=\"radio\"\n            name=\"sizeWorld\"\n            id=\"smallWorld\"\n            value=\"smallPlan\"\n            onChange={props.changeSizeWorld}\n            defaultChecked={props.defaultSizeWorld === smallPlan ? \"checked\" : \"\"}\n          />\n          <label className=\"form-check-label\" htmlFor=\"inlineRadio3\">\n            Small\n          </label>\n        </div>\n      </div>\n      <button className=\"btn btn-primary\" onClick={props.toggleShowViewWorld}>\n        Create World\n      </button>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport ViewWorld from \"./components/ViewWorld/ViewWorld\";\nimport WorldSettings from \"./components/WorldSettings/WorldSettings\";\nimport { largePlan, mediumPlan, smallPlan } from \"./startPlanesWorld\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    showViewWorld: false,\n    turnDelay: 300,\n    sizeWorld: mediumPlan,\n  };\n\n  toggleShowViewWorld = () => {\n    this.setState({ showViewWorld: !this.state.showViewWorld });\n  };\n\n  setValue = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  changeSizeWorld = e => {\n    console.log(e.target.value);\n    switch (e.target.value) {\n      case \"largePlan\": {\n        this.setState({ sizeWorld: largePlan });\n        break;\n      }\n      case \"mediumPlan\": {\n        this.setState({ sizeWorld: mediumPlan });\n        break;\n      }\n      case \"smallPlan\": {\n        this.setState({ sizeWorld: smallPlan });\n        break;\n      }\n      default: {\n        return;\n      }\n    }\n  };\n\n  render() {\n    const { showViewWorld, turnDelay, sizeWorld } = this.state;\n    return (\n      <div className=\"App\">\n        <h1>Virtual Ecosystem</h1>\n        {showViewWorld ? (\n          <ViewWorld toggleShowViewWorld={this.toggleShowViewWorld} turnDelay={turnDelay} sizeWorld={sizeWorld} />\n        ) : (\n          <WorldSettings\n            toggleShowViewWorld={this.toggleShowViewWorld}\n            setValue={this.setValue}\n            changeSizeWorld={this.changeSizeWorld}\n            defaultTurnDelay={turnDelay}\n            defaultSizeWorld={sizeWorld}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}